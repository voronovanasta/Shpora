import { Layout, Typography } from 'antd';
const style = { textAlign: 'left', width: '100%', marginBottom: '10px' };

const { Title, Paragraph } = Typography;
export function RouterPage() {
  return (
    <Layout style={{ padding: '10px' }}>
      <Title level={3}> React Router</Title>
      <Paragraph style={style} strong>
        –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å —Ä–æ—É—Ç–∏–Ω–≥–∞ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ–±—ã –ø–æ–∑–≤–æ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —á–∞—Å—Ç—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ë–ï–ó –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ò —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
      </Paragraph>
      <Title style={style} level={4}>
        {' '}
        Installing
      </Title>
      <Paragraph style={style}>npm install react-router-dom@next</Paragraph>
      <Paragraph style={style} mark strong>
        BrowserRouter :
      </Paragraph>
      <Paragraph style={style}>
        {' '}
        –≠—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è
        –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏. –û–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.{' '}
      </Paragraph>
      <Paragraph style={style}>
        <pre>
          {`
import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter } from 'react-router-dom';
import App from './App';

ReactDOM.render(
  <BrowserRouter>
    <App />
  </BrowserRouter>,
  document.getElementById('root')
);
`}
        </pre>
      </Paragraph>
      <Paragraph style={style} mark strong>
        Routes:
      </Paragraph>
      <Paragraph style={style}>
        {' '}
        Routes - —ç—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏. –ú—ã
        –∏—Å–ø–æ–ª—å–∑—É–µ–º Routes –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö Route –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.{' '}
      </Paragraph>
      <Paragraph style={style}>
        <pre>
          {`import { Routes, Route } from 'react-router-dom';

const App = () => {
  return (
    <div>
      <h1>–ú–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</h1>
      <Routes>
        <Route path="/" element={<HomePage />} />
        <Route path="/about" element={<AboutPage />} />
        <Route path="/contact" element={<ContactPage />} />
      </Routes>
    </div>
  );
};
`}
        </pre>
      </Paragraph>
      <Paragraph style={style} mark strong>
        Route:
      </Paragraph>
      <Paragraph style={style}>
        {' '}
        Route - —ç—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –≤–Ω—É—Ç—Ä–∏ Routes. –ö–∞–∂–¥—ã–π Route
        –∏–º–µ–µ—Ç —Å–≤–æ–π –ø—É—Ç—å (path) –∏ —ç–ª–µ–º–µ–Ω—Ç (element), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è, –∫–æ–≥–¥–∞ –º–∞—Ä—à—Ä—É—Ç
        —Å–æ–≤–ø–∞–¥–∞–µ—Ç.{' '}
      </Paragraph>
      <Paragraph style={style} strong>
        –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ exact –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        –ø—É—Ç–∏ –∏ (*) fallback –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞-–∑–∞–≥–ª—É—à–∫–∏, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω –∏–∑
        –º–∞—Ä—à—Ä—É—Ç–æ–≤.
      </Paragraph>

      <Paragraph style={style}>
        <pre>
          {`import { Routes, Route } from 'react-router-dom';

// ...

<Routes>
  <Route path="/" element={<Home />} />
  <Route path="/about" element={<About />} />
  <Route path="/contact" element={<Contact />} />
  <Route path="*" element={<NotFound />} />
</Routes>
`}
        </pre>
      </Paragraph>
      <Paragraph style={style} mark strong>
        Link:
      </Paragraph>
      <Paragraph style={style}>
        {' '}
        Link –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.{' '}
      </Paragraph>
      <Paragraph style={style}>
        <pre>
          {`
<Link to="/">–ì–ª–∞–≤–Ω–∞—è</Link>
<Link to="/about">–û –Ω–∞—Å</Link>
<Link to="/contact">–ö–æ–Ω—Ç–∞–∫—Ç—ã</Link>
`}
        </pre>
      </Paragraph>
      <Paragraph style={style} mark strong>
        NavLink:
      </Paragraph>
      <Paragraph style={style}>
        {' '}
        Whenever a NavLink is active, it will automatically have an .active class name for easy
        styling with CSS:
      </Paragraph>
      <Paragraph style={style}>
        <pre>
          {`
import { NavLink } from "react-router";

export function MyAppNav() {
  return (
    <nav>
      <NavLink to="/" end>
        Home
      </NavLink>
      <NavLink to="/trending" end>
        Trending Concerts
      </NavLink>
      <NavLink to="/concerts">All Concerts</NavLink>
      <NavLink to="/account">Account</NavLink>
    </nav>
  );
}

a.active {
  color: red;
}
`}
        </pre>
      </Paragraph>

      <Paragraph style={style} strong>
        It also has callback props on className, style, and children with the active state for
        inline styling or conditional rendering:
      </Paragraph>
      <Paragraph style={style}>
        <pre>
          {`
// className
<NavLink
  to="/messages"
  className={({ isActive }) =>
    isActive ? "text-red-500" : "text-black"
  }
>
  Messages
</NavLink>
Copy code to clipboard
// style
<NavLink
  to="/messages"
  style={({ isActive }) => ({
    color: isActive ? "red" : "black",
  })}
>
  Messages
</NavLink>
Copy code to clipboard
// children
<NavLink to="/message">
  {({ isActive }) => (
    <span className={isActive ? "active" : ""}>
      {isActive ? "üëâ" : ""} Tasks
    </span>
  )}
</NavLink>
`}
        </pre>
      </Paragraph>
      <Paragraph style={style} mark strong>
        useNavigate:
      </Paragraph>
      <Paragraph style={style}>
        –•—É–∫ useNavigate –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É –º–∞—Ä—à—Ä—É—Ç–∞–º–∏. –û–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º
        –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –¥—Ä—É–≥–∏–º –º–∞—Ä—à—Ä—É—Ç–∞–º –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π.
      </Paragraph>
      <Paragraph style={style} strong>
        This hook allows the programmer to navigate the user to a new page without the user
        interacting. For ex.:
      </Paragraph>
      <Paragraph style={style}> - After a form submission completes</Paragraph>
      <Paragraph style={style}> - Logging them out after inactivity</Paragraph>
      <Paragraph style={style}> - Timed UIs like quizzes, etc.</Paragraph>
      <Paragraph style={style}>
        <pre>
          {`
import { useNavigate } from "react-router";

export function LoginPage() {
  let navigate = useNavigate();

  return (
    <>
      <MyHeader />
      <MyLoginForm
        onSuccess={() => {
          navigate("/dashboard");
        }}
      />
      <MyFooter />
    </>
  );
}

`}
        </pre>
      </Paragraph>
      <Paragraph style={style} mark strong>
        useParams:
      </Paragraph>
      <Paragraph style={style}>
        {' '}
        UseParams - —ç—Ç–æ —Ö—É–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ React Router Dom v6.
        –ö–æ–≥–¥–∞ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å useParams, —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç params, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞—á–µ–Ω–∏—è
        –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞.{' '}
      </Paragraph>
      <Paragraph style={style} strong>
        –ß—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –º–∞—Ä—à—Ä—É—Ç–∞, –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–æ–µ—Ç–æ—á–∏–µ (:) –ø–µ—Ä–µ–¥ –∏–º–µ–Ω–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤
        –ø—É—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä:
      </Paragraph>
      <Paragraph style={style}>
        <pre>
          {`
<Route path="/users/:id" element={<UserDetailPage />} />

import { useParams } from 'react-router-dom';

const UserDetailPage = () => {
  const { id } = useParams();

  return (
    <div>
      <h2>–î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {id}</h2>
      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
    </div>
  );
};
`}
        </pre>
      </Paragraph>
      <Paragraph style={style} strong>
        You can have multiple dynamic segments in one route path:
      </Paragraph>
      <Paragraph style={style}>
        <pre>
          {`
<Route
  path="/c/:categoryId/p/:productId"
  element={<Product />}
/>

import { useParams } from "react-router";

export default function Team() {
  let { categoryId, productId } = useParams();
  // ...
}
`}
        </pre>
      </Paragraph>
      <Paragraph style={style} mark strong>
        useLocation:
      </Paragraph>
      <Paragraph style={style} strong>
        {' '}
        useLocation - —ç—Ç–æ —Ö—É–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º URL –∏ –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
        –≤ React Router Dom v6.{' '}
      </Paragraph>
      <Paragraph style={style} strong mark>
        –û–±—ä–µ–∫—Ç location –æ–±—ã—á–Ω–æ –∏–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞:
      </Paragraph>
      <Paragraph style={style}>
        - pathname: —Å—Ç—Ä–æ–∫–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, /about).
      </Paragraph>
      <Paragraph style={style}>
        - search: —Å—Ç—Ä–æ–∫–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è —Å—Ç—Ä–æ–∫—É –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ?query=example).
      </Paragraph>
      <Paragraph style={style}>
        - hash: —Å—Ç—Ä–æ–∫–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, #section1).
      </Paragraph>
      <Paragraph style={style}>
        - state: –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
      </Paragraph>
      <Paragraph style={style}>
        <pre>
          {`
 const navigate = useNavigate();

  const handleClick = () => {
    navigate('/about', {
      state: { fromDashboard: true },
    });
  };

  //–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ About
  const location = useLocation();
  const state = location.state;
`}
        </pre>
      </Paragraph>
      <Paragraph style={style} mark strong>
        Outlet:
      </Paragraph>
      <Paragraph style={style}>
        {' '}
        Outlet –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–µ—Å—Ç–æ, –≥–¥–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã.
      </Paragraph>
      <Paragraph style={style}>
        <pre>
          {`
<Routes>
  <Route path="dashboard" element={<Dashboard />}>
    <Route index element={<Home />} />
    <Route path="settings" element={<Settings />} />
  </Route>
</Routes>


import { Outlet } from "react-router";

export default function Dashboard() {
  return (
    <div>
      <h1>Dashboard</h1>
      {/* will either be <Home/> or <Settings/> */}
      <Outlet />
    </div>
  );
}
`}
        </pre>
      </Paragraph>
      <Paragraph style={style} strong>
        –í–∞–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ Outlet –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è
        —á–∞—Å—Ç—å—é –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –º–∞—Ä—à—Ä—É—Ç–µ.
      </Paragraph>

      <Paragraph style={style} mark strong>
        PrivateRoute:
      </Paragraph>
      <Paragraph style={style}>
        <pre>
          {`
import { Route, Navigate } from 'react-router-dom';

const PrivateRoute = ({ ...props }) => {
  const isAuth = // –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  return isAuth ? <Outlet /> : <Navigate to="/login" replace />;
};


import { BrowserRouter as Router, Routes, Route } from "react-router-dom";

const App = () => {
  return (
    <Router>
      <Routes>
        <Route path="/login" element={<LoginPage />} />
        <Route element={<PrivateRoute />}>
          <Route path="/todo" element={<Todo />} />
        </Route>
      </Routes>
    </Router>
  );
};
`}
        </pre>
      </Paragraph>
      <Paragraph style={style}>
        Routes without a path create new nesting for their children, but they dont add any segments
        to the URL.
      </Paragraph>
      <Paragraph style={style} mark strong>
        Index Routes{' '}
      </Paragraph>
      <Paragraph style={style}>
        {' '}
        Index routes render into their parents Outlet at their parents URL (like a default child
        route). They cant have children. They are configured with the index prop:
      </Paragraph>
      <Paragraph style={style}>
        <pre>
          {`
<Routes>
  <Route path="/" element={<Root />}>
    {/* renders into the outlet in <Root> at "/" */}
    <Route index element={<Home />} />

    <Route path="dashboard" element={<Dashboard />}>
      {/* renders into the outlet in <Dashboard> at "/dashboard" */}
      <Route index element={<DashboardHome />} />
      <Route path="settings" element={<Settings />} />
    </Route>
  </Route>
</Routes>
`}
        </pre>
      </Paragraph>
      <Paragraph style={style} mark strong>
        {' '}
        Route Prefixes
      </Paragraph>
      <Paragraph style={style}>
        A Route path without an element prop adds a path prefix to its child routes, without
        introducing a parent layout.
        <Paragraph style={style}>
          <pre>
            {`
<Route path="projects">
  <Route index element={<ProjectsHome />} />
  <Route element={<ProjectsLayout />}>
    <Route path=":pid" element={<Project />} />
    <Route path=":pid/edit" element={<EditProject />} />
  </Route>
</Route>
`}
          </pre>
        </Paragraph>
      </Paragraph>
      <Paragraph style={style} mark strong>
        {' '}
        Query Parameters
      </Paragraph>
      <Paragraph style={style}>
        Search params are the values after a ? in the URL. They are accessible from useSearchParams,
        which returns an instance of URLSearchParams
        <Paragraph style={style}>
          <pre>
            {`
function SearchResults() {
  let [searchParams] = useSearchParams();
  return (
    <div>
      <p>
        You searched for <i>{searchParams.get("q")}</i>
      </p>
      <FakeSearchResults />
    </div>
  );
}

`}
          </pre>
        </Paragraph>
      </Paragraph>
    </Layout>
  );
}
